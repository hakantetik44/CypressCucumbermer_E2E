name: Ablysen_E2E Test Automation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *'  # Exécute à minuit chaque jour

# Autorisations de niveau supérieur pour tous les jobs
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  actions: write
  deployments: write
  statuses: write
  issues: write
  pull-requests: write
  security-events: write

# Configuration de GitHub Pages au niveau du référentiel
env:
  GITHUB_PAGES: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cypress-run:
    name: 🧪 Tests Cypress
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Télécharger le Code
      uses: actions/checkout@v4

    - name: 🟢 Configurer Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📥 Installer les Dépendances
      run: |
        npm install cypress@13.6.6 
        npm install @badeball/cypress-cucumber-preprocessor@20.0.1 
        npm install @bahmutov/cypress-esbuild-preprocessor@2.2.0 
        npm install multiple-cucumber-html-reporter@3.6.1
        npm install cucumber-html-reporter
        npm install mocha@10.2.0
        npm install mochawesome@7.1.3
        npm install mochawesome-merge@4.3.0
        npm install mochawesome-report-generator@6.2.0
        npm install cypress-multi-reporters@1.6.3
        npx cypress verify

    - name: 🌐 Installer Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable

    - name: 📝 Configurer Cypress
      run: |
        echo '{
          "baseUrl": "https://www.saucedemo.com",
          "defaultCommandTimeout": 10000,
          "viewportWidth": 1920,
          "viewportHeight": 1080,
          "video": true,
          "screenshotOnRunFailure": true,
          "reporter": "cypress-multi-reporters",
          "reporterOptions": {
            "reporterEnabled": "mochawesome, mocha-junit-reporter",
            "mochawesomeReporterOptions": {
              "reportDir": "cypress/reports/mocha",
              "quite": true,
              "overwrite": false,
              "html": true,
              "json": true
            }
          },
          "env": {
            "TAGS": "not @ignore",
            "cucumber-json": {
              "enabled": true,
              "output": "cypress/reports/cucumber/cucumber-report.json"
            }
          }
        }' > cypress.json

    - name: 🧪 Exécuter les Tests Cypress
      run: |
        echo "Heure de début des tests: $(date '+%Y-%m-%d %H:%M:%S')"
        mkdir -p cypress/reports/json
        mkdir -p cypress/reports/cucumber
        mkdir -p cypress/reports/mocha
        CYPRESS_REPORT_DIR=cypress/reports/cucumber npx cypress run --browser chrome --reporter cypress-multi-reporters
        
        # Fusionner les rapports Mocha
        npx mochawesome-merge cypress/reports/mocha/*.json > cypress/reports/mocha/output.json
        npx marge cypress/reports/mocha/output.json --reportDir cypress/reports/mocha --inline

        # Copier le rapport Cucumber JSON
        if [ -f cypress/cucumber-messages.ndjson ]; then
          cat cypress/cucumber-messages.ndjson | npx @cucumber/json-formatter > cypress/reports/cucumber/cucumber-report.json
        fi
      continue-on-error: true

    - name: 📊 Générer les Rapports
      if: always()
      run: |
        # Générer le rapport Cucumber HTML
        echo 'const reporter = require("cucumber-html-reporter");
        const options = {
          theme: "bootstrap",
          jsonFile: "cypress/reports/cucumber/cucumber-report.json",
          output: "cypress/reports/cucumber/cucumber-report.html",
          reportSuiteAsScenarios: true,
          scenarioTimestamp: true,
          launchReport: false,
          metadata: {
            "App Version": "1.0.0",
            "Test Environment": "STAGING",
            "Browser": "Chrome",
            "Platform": "Ubuntu-Latest",
            "Executed": "Remote"
          }
        };
        reporter.generate(options);' > cucumber-report.js
        
        if [ -f cypress/reports/cucumber/cucumber-report.json ]; then
          node cucumber-report.js
        else
          echo "Aucun rapport Cucumber JSON trouvé"
          cp cypress/reports/mocha/output.html cypress/reports/cucumber/cucumber-report.html
        fi

    - name: 📊 Télécharger les Rapports de Test
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-reports
        path: |
          cypress/reports/cucumber
          cypress/reports/mocha
          cypress/screenshots
          cypress/videos
        retention-days: 30

  pages:
    name: 🌐 GitHub Pages
    needs: cypress-run
    runs-on: ubuntu-latest
    if: always()
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Télécharger les Rapports de Test
      uses: actions/download-artifact@v4
      with:
        name: cypress-reports
        path: cypress-reports

    - name: 📝 Créer index.html
      run: |
        mkdir -p cypress-reports
        if [ -f cypress-reports/cucumber/cucumber-report.html ]; then
          cp cypress-reports/cucumber/cucumber-report.html cypress-reports/index.html
        else
          cp cypress-reports/mocha/output.html cypress-reports/index.html
        fi

    - name: 🔧 Configuration de GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: 📤 Télécharger les Artefacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: cypress-reports

    - name: 🚀 Déployer sur GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    name: 📢 Notification
    needs: [cypress-run, pages]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Vérification du Statut
      run: |
        if [[ "${{ needs.cypress-run.result }}" == "success" ]]; then
          echo "## ✅ Tests Terminés avec Succès" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Erreur de Test Détectée" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.pages.result }}" == "success" ]]; then
          echo "## 🌐 Rapport Publié avec Succès" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Rapport de Test](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Erreur de Publication du Rapport" >> $GITHUB_STEP_SUMMARY
        fi 