name: Ablysen_E2E Test Automation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *'  # Ex√©cute √† minuit chaque jour

# Autorisations de niveau sup√©rieur pour tous les jobs
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  actions: write
  deployments: write
  statuses: write
  issues: write
  pull-requests: write
  security-events: write

# Configuration de GitHub Pages au niveau du r√©f√©rentiel
env:
  GITHUB_PAGES: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cypress-run:
    name: üß™ Tests Cypress
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node-20.9.0-chrome-118.0.5993.88-1-ff-118.0.2-edge-118.0.2088.46-1
      options: --user 1001
    
    steps:
    - name: üì• T√©l√©charger le Code
      uses: actions/checkout@v4

    - name: üì• Installer les D√©pendances
      run: |
        echo '{
          "name": "ablysen-e2e",
          "version": "1.0.0",
          "description": "Ablysen E2E Tests",
          "scripts": {
            "test": "cypress run",
            "cypress:open": "cypress open"
          },
          "dependencies": {
            "cypress": "^13.6.6",
            "@badeball/cypress-cucumber-preprocessor": "^20.0.1",
            "@bahmutov/cypress-esbuild-preprocessor": "^2.2.0"
          },
          "cypress-cucumber-preprocessor": {
            "stepDefinitions": "cypress/e2e/step_definitions/**/*.js",
            "html": {
              "enabled": true,
              "output": "cypress/reports/cucumber/cucumber-report.html"
            },
            "messages": {
              "enabled": true,
              "output": "cypress/reports/cucumber/cucumber-messages.ndjson"
            },
            "json": {
              "enabled": true,
              "output": "cypress/reports/cucumber/cucumber-report.json"
            }
          }
        }' > package.json
        npm install
        npx cypress verify

    - name: üìù Configurer Cypress
      run: |
        echo 'const { defineConfig } = require("cypress");
        const createBundler = require("@bahmutov/cypress-esbuild-preprocessor");
        const { addCucumberPreprocessorPlugin } = require("@badeball/cypress-cucumber-preprocessor");
        const { createEsbuildPlugin } = require("@badeball/cypress-cucumber-preprocessor/esbuild");

        module.exports = defineConfig({
          e2e: {
            specPattern: "cypress/e2e/features/*.feature",
            supportFile: "cypress/support/e2e.js",
            baseUrl: "https://www.saucedemo.com",
            defaultCommandTimeout: 10000,
            viewportWidth: 1920,
            viewportHeight: 1080,
            video: true,
            screenshotOnRunFailure: true,
            async setupNodeEvents(on, config) {
              await addCucumberPreprocessorPlugin(on, config);
              on(
                "file:preprocessor",
                createBundler({
                  plugins: [createEsbuildPlugin(config)],
                })
              );
              return config;
            },
          },
        });' > cypress.config.js

        # Cr√©er le fichier support
        mkdir -p cypress/support
        echo '// Import commands.js using ES2015 syntax:
        import "./commands";
        
        // Alternatively you can use CommonJS syntax:
        // require("./commands")
        
        // Hide fetch/XHR requests from command log
        const app = window.top;
        if (!app.document.head.querySelector("[data-hide-command-log-request]")) {
          const style = app.document.createElement("style");
          style.innerHTML =
            ".command-name-request, .command-name-xhr { display: none }";
          style.setAttribute("data-hide-command-log-request", "");
          app.document.head.appendChild(style);
        }' > cypress/support/e2e.js

        echo '// ***********************************************
        // This example commands.js shows you how to
        // create various custom commands and overwrite
        // existing commands.
        //
        // For more comprehensive examples of custom
        // commands please read more here:
        // https://on.cypress.io/custom-commands
        // ***********************************************' > cypress/support/commands.js

    - name: üß™ Ex√©cuter les Tests Cypress
      run: |
        echo "Heure de d√©but des tests: $(date '+%Y-%m-%d %H:%M:%S')"
        mkdir -p cypress/reports/cucumber
        CYPRESS_CRASH_REPORTS=0 NO_COLOR=1 npx cypress run --browser chrome
      continue-on-error: true

    - name: üìù Cr√©er le Rapport HTML
      if: always()
      run: |
        # Cr√©er la structure des dossiers
        mkdir -p public
        mkdir -p public/videos
        mkdir -p public/screenshots
        mkdir -p public/cucumber

        # Copier les rapports et artefacts
        if [ -d "cypress/videos" ]; then
          cp -r cypress/videos/* public/videos/ || true
        fi
        if [ -d "cypress/screenshots" ]; then
          cp -r cypress/screenshots/* public/screenshots/ || true
        fi
        if [ -d "cypress/reports/cucumber" ]; then
          cp -r cypress/reports/cucumber/* public/cucumber/ || true
        fi

        # Cr√©er index.html
        echo '<!DOCTYPE html>
        <html>
        <head>
            <title>Rapport de Tests Cypress - Ablysen</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                h1, h2 { color: #2c3e50; }
                .timestamp { color: #666; font-style: italic; }
                .section { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 8px; }
                .video-container, .screenshot-container { margin: 20px 0; }
                .video-item, .screenshot-item {
                    margin: 15px 0;
                    padding: 15px;
                    background: white;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }
                .video-item h3, .screenshot-item h3 { color: #34495e; margin-top: 0; }
                video, img { max-width: 100%; border-radius: 4px; }
                .no-items { color: #666; font-style: italic; padding: 10px; }
                .cucumber-report { margin-top: 20px; }
                .cucumber-report a { 
                    display: inline-block;
                    padding: 10px 20px;
                    background: #3498db;
                    color: white;
                    text-decoration: none;
                    border-radius: 4px;
                    transition: background 0.3s;
                }
                .cucumber-report a:hover {
                    background: #2980b9;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Rapport de Tests Cypress - Ablysen</h1>
                <p class="timestamp">Date d'"'"'ex√©cution: '"$(date '+%Y-%m-%d %H:%M:%S')"'</p>
                
                <div class="section cucumber-report">
                    <h2>Rapport Cucumber</h2>
                    <a href="./cucumber/cucumber-report.html">Voir le Rapport D√©taill√©</a>
                </div>

                <div class="section">
                    <h2>Vid√©os des Tests</h2>
                    <div class="video-container">
                        '"$(if ls public/videos/*.mp4 1> /dev/null 2>&1; then
                            for video in public/videos/*.mp4; do
                                filename=$(basename "$video")
                                echo "<div class='video-item'>"
                                echo "<h3>$filename</h3>"
                                echo "<video width='100%' controls>"
                                echo "<source src='./videos/$filename' type='video/mp4'>"
                                echo "Votre navigateur ne supporte pas la lecture vid√©o."
                                echo "</video>"
                                echo "</div>"
                            done
                        else
                            echo "<p class='no-items'>Aucune vid√©o disponible</p>"
                        fi)"'
                    </div>
                </div>
                
                <div class="section">
                    <h2>Captures d'"'"'√©cran</h2>
                    <div class="screenshot-container">
                        '"$(if ls public/screenshots/**/*.png 1> /dev/null 2>&1; then
                            for screenshot in public/screenshots/**/*.png; do
                                filename=$(basename "$screenshot")
                                dir=$(basename $(dirname "$screenshot"))
                                echo "<div class='screenshot-item'>"
                                echo "<h3>$dir - $filename</h3>"
                                echo "<img src='./screenshots/$dir/$filename' alt='$filename'>"
                                echo "</div>"
                            done
                        else
                            echo "<p class='no-items'>Aucune capture d'√©cran disponible</p>"
                        fi)"'
                    </div>
                </div>
            </div>
        </body>
        </html>' > public/index.html

    - name: üìä T√©l√©charger les Rapports de Test
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-reports
        path: public
        retention-days: 30

  pages:
    name: üåê GitHub Pages
    needs: cypress-run
    runs-on: ubuntu-latest
    if: always()
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üì• T√©l√©charger les Rapports de Test
      uses: actions/download-artifact@v4
      with:
        name: cypress-reports
        path: public

    - name: üîß Configuration de GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: üì§ T√©l√©charger les Artefacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: public

    - name: üöÄ D√©ployer sur GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    name: üì¢ Notification
    needs: [cypress-run, pages]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üìã V√©rification du Statut
      run: |
        if [[ "${{ needs.cypress-run.result }}" == "success" ]]; then
          echo "## ‚úÖ Tests Termin√©s avec Succ√®s" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Erreur de Test D√©tect√©e" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.pages.result }}" == "success" ]]; then
          echo "## üåê Rapport Publi√© avec Succ√®s" >> $GITHUB_STEP_SUMMARY
          echo "üìä [Rapport de Test](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ö†Ô∏è Erreur de Publication du Rapport" >> $GITHUB_STEP_SUMMARY
        fi 